<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="Scheduler" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- <property name="configLocation" value="classpath:quartz.properties"/> -->
		<property name="quartzProperties">
			<props>
				<!-- <prop key="org.quartz.scheduler.instanceName">defaultScheduler</prop> 
					<prop key="org.quartz.scheduler.instanceId">AUTO</prop> -->
				<!-- 线程池配置 -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">4</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				<!-- JobStore配置 <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop> 
					集群配置 <prop key="org.quartz.jobStore.isClustered">true</prop> <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop> 
					<prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop> <prop 
					key="org.quartz.jobStore.misfireThreshold">120000</prop> 表名配置 <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop> -->
			</props>
		</property>
		<!-- <property name="schedulerName" value="defaultScheduler" /> 必须的，QuartzScheduler 
			延时启动，应用启动完后 QuartzScheduler 再启动 <property name="startupDelay" value="30" 
			/> <property name="applicationContextSchedulerContextKey" value="applicationContextKey" 
			/> 可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 
			<property name="overwriteExistingJobs" value="true" /> 设置自动启动 <property name="autoStartup" 
			value="true" /> 注册触发器 <property name="triggers"> <ref bean="defaultTriggers" 
			/> </property> 注册jobDetail <property name="jobDetails"> <ref bean="defaultJobDetails" 
			/> </property> 注册监听器 <property name="schedulerListeners"> <ref bean="defaultSchedulerListeners" 
			/> </property> -->

		<property name="taskExecutor" ref="executor" />
		 <property name="triggers" >  
             <list>  
                   <ref bean="testTaskTrigger" />  
             </list>  
       </property>  
	</bean>
	
<!-- 线程执行器配置，用于任务注册 -->
	<bean id="executor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="1" />

		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="50" />

		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="200" />

		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="80" />

		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 
		<property name="rejectedExecutionHandler">
			AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 
				CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 
				DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property> -->
	</bean>
	
	
<!-- 实例化bean -->  
<bean id= "testMethodQuartz" class ="com.fwzx.controller.ShowJb"/>  
  
<!-- 配置MethodInvokingJobDetailFactoryBean -->  
<bean id= "testTaskMethod"  
class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
       <property name="targetObject" ref="testMethodQuartz"/>  
       <property name="targetMethod" value="show"/>  
       <property name="concurrent" value="false"/>  
</bean>  
  
<!-- 配置定时表达式 -->  
<bean id= "testTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >  
       <property name="jobDetail" ref="testTaskMethod" />   
      <!-- 每一分钟执行一次 -->   
      <property name="cronExpression" value="0 0 17 * * ?"></property>   
</bean>  


</beans>